# Site settings
title: Eric Sund
description: Eric's snazzy corner of the web
baseurl: "" # the subpath of your site, e.g. /blog
# url: "localhost:3000" # the base hostname & protocol for your site e.g. http://willianjusten.com.br
url: "localhost:3000"

# User settings
username: Eric Sund
user_description: |
  Hello! üëã I‚Äôm Eric Sund - a software engineer in Seattle, WA. üó∫Ô∏è I earned a <b>Bachelor of Science in Computer Science and Mathematics</b> at
  <a href=sfu.ca>Simon Fraser University</a> in 2022. üéì I have 1 year of full-time software engineering experience, and 2 years of internship experience.<br><br>
  I presently work as a <a href=https://www.linkedin.com/posts/akamai-technologies_akamaius-weareakamai-akamaiaroundtheworld-activity-6922650261945466880-HQzX>software
  engineer at Akamai</a> on <a href=https://www.linode.com/products/kubernetes>Linode Kubernetes</a>.  Prior to that, I worked on
  <a href=https://www.linode.com/products/databases>Linode Managed Databases</a> and Ghost üëª, a web server for the Akamai CDN that handles ~1/4 of the world's Internet
  traffic. <br><br>
  
  I enjoy distributed systems and networking, but also like app development, üíª low-level embedded systems and operating systems.  I also have a knack for
  numerical methods üî¢ and scientific computing üß™.  Check out some of my projets below!<br><br>
  
  Apart from math and programming, I‚Äôm into backpacking ‚õ∫, travelling üéí, videography üìπ, and listening to indie rock üéµ!
  Shoot me an <a href="mailto:epsund@gmail.com">email</a> if you‚Äôd like to chat!

user_title: Software Engineer II, 3 Years Experience
email: epsund@gmail.com
# twitter_username: epsund
# github_username:  ericsund
# gplus_username:  lorem_ipsum

# Google-analytics
google-analytics:
  id: ""

exclude: ['package.json', 'src' , 'node_modules']

about1: >
  C/C++ <br><br>
  C# <br><br>
  Java <br><br>
  Python <br><br>
  Golang <br><br>
  Node, Typescript, React <br><br>
  PHP <br><br>
  Linux/UNIX kernel development <br><br>
  Kubernetes, Docker, Ansible, Terraform, Crossplane <br><br>
  AWS (Cloud Practitioner Certified!), GCP, Linode <br><br>
  Ruby on Rails <br><br>
  SQL <br>

about2: >
  <b>Akamai</b> - Software Engineer II<br>
  Oct 2022 - Current<br><br>
  <b>Akamai</b> - Software Engineer I<br>
  Feb 2022 - Oct 2022<br><br>
  <b>Akamai</b> - Software Engineer Intern<br>
  Sept 2021 - Dec 2021<br><br>
  <b>Akamai</b> - DevOps Engineer Intern<br>
  May 2021 - August 2021<br><br>
  <b>Hootsuite</b> - Production Operations (DevOps) Engineer Intern<br>
  January 2019 - April 2019<br><br>
  <b>Beanworks Solutions</b> - Software Developer Intern<br>
  May 2018 - August 2018<br><br>
  <b>Thinkific</b> - Full Stack Developer/QA/Support Intern<br>
  April 2017 - March 2018<br><br>
  <b>Teradici</b> - QA Developer Intern<br>
  May 2016 - August 2016<br>
  
about3: >
  <ul>
  <li>Embedded Systems <br></li>
  <li>Dynamical Systems <br></li>
  <li>Computer Vision <br></li>
  <li>Quantum Computing <br></li>
  <li>Numerical Analysis II <br></li>
  <li>Numerical Analysis I <br></li>
  <li>Data Structures & Algorithms <br></li>
  <li>Networking <br></li>
  <li>Database Systems <br></li>
  <li>Operating Systems <br></li>
  <li>Elementary Number Theory <br></li>
  <li>Ring and Field Theory <br></li>
  <li>Applied Group Theory and Permutations <br></li>
  <li>Ordinary Differential Equations <br></li>
  <li>Linear Programming <br></li>
  <li>Computer Architecture <br></li>
  <li>Data Structures & Programming <br></li>
  <li>Object Oriented Programming with Java <br></li>
  <li>Real Analysis I <br></li>
  <li>Applied Linear Algebra <br></li>
  <li>Calculus III <br></li>
  <li>Probability & Statistics <br></li>
  <li>Computational Linear Algebra (MATLAB) <br></li>
  <li>Computational Calculus (MAPLE) <br></li>
  <li>Discrete Mathematics II <br></li>
  <li>Calculus II <br></li>
  <li>Calculus I <br></li>
  <li>Discrete Mathematics I <br></li>
  <li>C/C++ Computing Laboratory <br></li>
  <li>Intro to Computer Science II <br></li>
  <li>Intro to Computer Science I <br></li>
  </ul>

proj1_top: |
  <br><br>Beatboxer lets a user playback some pre-made beats, or create their own!
  Beatboxer runs on physical hardware and connects your local network allowing
  for control by hand or by web.  Here‚Äôs what the whole system looks like:
proj1_bottom: |
    This project touched on a huge range of abstractions - from reading individual
    bytes in registers to showing content on the frontend. <br><br>
    
    Getting the MMA8452Q accelerometer working was a little challenging. The first 8-bit register you
    read in C is always 0xFF. To read something you care about (like x-y-z coordinates),
    you need to read multiple registers in one go with an 8-bit offset, to get an array
    of bytes. Each coordinate is stored as a 16-bit value across two registers - the LSB
    and MSB bits. By default, reading multiple bytes will skip the LSB, so you also need
    to write to other registers so this is turned off!  <br><br>
    
    The audio was done using the ALSA C API. Pushing the joystick will queue new PCM samples for
    playback. A thread will load the samples into memory, and another thread will play them back.
    A third (heartbeat) thread will send/receive the current beat over UDP to the node web server
    so it can be displayed and controlled from the frontend!

proj2: |
  <br><br>‚ÄúMorse Driver‚Äù is a misc driver that runs on a custom Linux kernel.  In Linux, hardware
  interaction is exposed via device driver files. Writing a string to /dev/morse-code will
  flash an onboard LED with the morse code equivalent. Reading will spit out the dot/dash
  equivalent of your strings in text. This is all stored in the kernel‚Äôs FIFO queue.

proj3: |
  <br><br>S-talk lets two people instant message each other over the local area network. The beauty of this is
  the same single binary can be run by two different people on their own computers.  I had a bit of
  multithreading going on:

  <ul>
  <li>Thread for grabbing keyboard input</li>
  <li>Thread for displaying text on the screen</li>
  <ol type="a">
    <li>This text comes from either typing a message, or receiving one from the other person</li>
  </ol>
  <li>Thread for sending UDP packets</li>
  <li>Thread for receiving UDP packets</li>
  </ul>
  
  There were some edge cases:
  <ul>
  <li>If you decide to send the whole Bee Movie script as a string, it‚Äôs way too long to fit in a single
  UDP packet, so
  <ol type="a">
  <li>chop it into several partitions</li>
  <li>add those partitions into a free list</li>
  <li>send each paritition as an individual packet until the free list is empty</li>
  </ol>
  <li>When two users try to send at once, or receive at once, we need a mutex and signaler/waiter to handle
  it. This is a classic critical section problem.</li>
  </ul>

  I learned about dynamic memory allocation with a <a href="https://en.wikipedia.org/wiki/Free_list">free list</a>
  which proved to be extremely handy. Unlike malloc, I had tight control over where in memory my bytes were stored.
  I also implemented a UDP networking solution in C that ran on two threads. The whole thing worked with one
  socket - all you had to do was run the compiled binary on two different computers.

proj4: |
  I worked on a Dynamical Systems project which used chaos theory for data encryption and secure communication.
  Here's a <a href="https://github.com/ericsund/467-chaos-theory/blob/main/MATH_467_Project.pdf">link to the paper</a>!
